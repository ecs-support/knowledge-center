<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sarawut Wongsanga | ECS</title>
    <link>https://ecs-support.github.io/knowledge-center/customs/author/sarawut-wongsanga/</link>
      <atom:link href="https://ecs-support.github.io/knowledge-center/customs/author/sarawut-wongsanga/index.xml" rel="self" type="application/rss+xml" />
    <description>Sarawut Wongsanga</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>ECS@Support©2020</copyright><lastBuildDate>Tue, 26 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ecs-support.github.io/knowledge-center/customs/author/sarawut-wongsanga/avatar_hu9c0cdb97929754257117a119e95d28a3_5619_270x270_fill_q90_lanczos_center.jpg</url>
      <title>Sarawut Wongsanga</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/author/sarawut-wongsanga/</link>
    </image>
    
    <item>
      <title>บัญชีรายชื่อวัตถุอันตราย (ฉบับที่6) พ.ศ.2563</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/dangerous-goods/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/dangerous-goods/</guid>
      <description>&lt;p&gt;เว็บไซต์ราชกิจานุเบกษา เผยแพร่ประกาศ ลงนามโดย นายสุริยะ จึงรุ่งเรืองกิจ รัฐมนตรีว่าการกระทรวงอุตสาหกรรม “ประกาศกระทรวงอุตสาหกรรม” เรื่อง บัญชีรายชื่อวัตถุอันตราย (ฉบับที่ 6) พ.ศ.2563 อาศัยอำนาจตามความในมาตรา 5 วรรคสอง และมาตรา 18 วรรคสอง แห่งพระราชบัญญัติวัตถุอันตราย พ.ศ. 2535 รัฐมนตรีว่าการกระทรวงอุตสาหกรรม โดยความเห็นชอบของคณะกรรมการวัตถุอันตราย ออกประกาศไว้&lt;/p&gt;

&lt;p&gt;ข้อ 1 ให้ยกเลิกรายการเกี่ยวกับวัตถุอันตราย ในบัญชีรายชื่อวัตถุอันตรายแนบท้ายประกาศกระทรวงอุตสาหกรรม เรื่อง บัญชีรายชื่อวัตถุอันตราย พ.ศ. 2556 ลงวันที่ 28 สิงหาคม พ.ศ.2556 ดังต่อไปนี้ โดยให้รายการตามบัญชีรายชื่อวัตถุอันตรายแนบท้ายประกาศฉบับนี้แทนบัญชีที่ 1 ที่กรมวิชาการเกษตรรับผิดชอบ บัญชี 1.1 &lt;em&gt;รายชื่อสารควบคุม ลำดับที่ 53 คลอร์ไพริฟอส ลำดับที่ 54 คลอร์ไพริฟอส-เมทิล ลำดับที่ 352 พาราควอต ลำดับที่ 353 พาราควอตไดคลอไรด์ และลำดับที่ 354 พาราควอตไดคลอไรด์&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ข้อ 2 ให้ผู้ผลิต ผู้นำเข้า ผู้ส่งออก หรือผู้มีไว้ครอบครองซึ่งวัตถุอันตรายชนิดที่ 4 ตามประกาศฉบับนี้ ที่ได้ดำเนินการอยู่ก่อนวันที่ประกาศฉบับนี้มีผลใช้บังคับ ปฎิบัติตามคำสั่งของพนักงานเจ้าหน้าที่ในระยะเวลาที่พนักงานเจ้าหน้าที่กำหนด&lt;/p&gt;

&lt;p&gt;ข้อ 3 ประกาศนี้ ให้มีผลใช้บังคับ ตั้งแต่&lt;strong&gt;วันที่ 1 มิถุนายน 2563 เป็นต้นไป&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;responsive-wrap&#34;&gt;
  &lt;iframe src=&#34;./attached.pdf&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;800&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34; style=&#34;margin-left:20%; margin-top:3rem;&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Collections.Counter</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/collections/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/collections/</guid>
      <description>&lt;p&gt;มอดูล collections ของไพธอนประกอบไปด้วยออบเจ็กต์จิปาถะที่อาจสะดวกที่จะใช้ในงานบางอย่าง เช่น collections.OrderedDict ที่ได้เขียนไปใน &lt;a href=&#34;https://phyblas.hinaboshi.com/20190706&#34;&gt;https://phyblas.hinaboshi.com/20190706&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ในบทความนี้จะแนะนำออบเจ็กต์อีกตัวที่อาจมีโอกาสได้ใช้บ่อย คือ collections.Counter Counter เป็นออบเจ็กต์ที่ใช้งานสะดวก ในเวลาที่เราต้องการจะนับจำนวนของอะไรบางอย่างว่ามีอะไรอยู่เท่าไหร่ เช่น มีลิสต์ที่มีตัวเลขอยู่จำนวนหนึ่ง ต้องการจะนับดูว่ามีตัวเลขอะไรอยู่เท่าไหร่ ถ้าใช้ดิกชันนารีทั่วไป อาจเขียนได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lislek = [12,10,11,12,14,11,11,13,11,10,13,12]
naplek = {}
for lek in lislek:
    if(lek in naplek):
        naplek[lek] += 1
    else:
        naplek[lek] = 1

print(naplek) # ได้ {12: 3, 10: 2, 11: 4, 14: 1, 13: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ถ้าใช้ Counter ก็จะทำได้โดยง่าย โดยแค่ใส่ลิสต์นั้นลงไปก็จะทำการนับให้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

lislek = [22,20,21,22,24,21,21,23,21,20,23,22]
naplek = Counter(lislek)
print(naplek) # ได้ Counter({21: 4, 22: 3, 20: 2, 23: 2, 24: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ผลที่ได้จะได้เป็นออบเจ็กต์ Counter ที่เรียงลำดับตามจำนวนจากมากไปน้อยให้เลย&lt;/p&gt;

&lt;p&gt;ออบเจ็กต์ Counter นี้โดยพื้นฐานแล้วมีส่วนคล้ายกับออบเจ็กต์ชนิดดิกชันนารี คือสามารถดูค่าได้โดยใส่คีย์ เพียงแต่ถ้าใส่คีย์ที่ไม่มีจะได้ค่า 0 และมีเมธอด .values() .keys() .items() และสามารถแปลงเป็นดิกชันนารีได้โดยง่าย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(naplek[22]) # ได้ 3
print(naplek[26]) # ได้ 0
print(naplek.keys()) # ได้ dict_keys([22, 20, 21, 24, 23])
print(naplek.values()) # ได้ dict_values([3, 2, 4, 1, 2])
print(naplek.items()) # ได้ dict_items([(22, 3), (20, 2), (21, 4), (24, 1), (23, 2)])
print(dict(naplek)) # ได้ {22: 3, 20: 2, 21: 4, 24: 1, 23: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตั้งแต่ไพธอน 3.6 เป็นต้นไปดิกชันนารีจะเรียงอย่างมีลำดับ ดังนั้น Counter เมื่อแปลงเป็นดิกชันนารีแล้วลำดับในที่นี้จะเรียงตามลำดับก่อนหลังที่เริ่มเจอตัวแรก เหมือนอย่างในตัวอย่างแรกที่วนไล่ด้วย for สร้างดิกชันนารีขึ้นมาเอง&lt;/p&gt;

&lt;p&gt;Counter นอกจากจะใช้กับลิสต์แล้วก็ยังใช้กับสายอักขระได้ด้วย โดยถ้าป้อนสายอักขระลงไปมันก็จะช่วยนับจำนวนให้ว่ามีอักษรตัวไหนอยู่กี่ตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter(&#39;จอดรถตรงตรอกยอมทนอดนอนอดกรนรอยลภมรดมดอกหอมบนขอนตรงคลองมอญ&#39;)
print(napakson) # ได้ Counter({&#39;อ&#39;: 12, &#39;ร&#39;: 7, &#39;น&#39;: 6, &#39;ด&#39;: 5, &#39;ม&#39;: 5, &#39;ต&#39;: 3, &#39;ง&#39;: 3, &#39;ก&#39;: 3, &#39;ย&#39;: 2, &#39;ล&#39;: 2, &#39;จ&#39;: 1, &#39;ถ&#39;: 1, &#39;ท&#39;: 1, &#39;ภ&#39;: 1, &#39;ห&#39;: 1, &#39;บ&#39;: 1, &#39;ข&#39;: 1, &#39;ค&#39;: 1, &#39;ญ&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter ที่สร้างมาแล้วสามารถเพิ่มข้อมูลลงไปได้ เช่นโดยใช้ +=&lt;/p&gt;

&lt;p&gt;เช่นอาจลองสร้าง Counter ว่างเปล่าแล้วค่อยๆใส่สมาชิกเพิ่มเข้าไป โดยไล่นับเพิ่มไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lislek = [2,1,4,5,2,6,2,6,3,2,4,1,2,2,3,2,1,4,2,4]
naplek = Counter()
for lek in lislek:
    naplek[lek] += 1

print(naplek)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรืออาจใช้เมธอด .update() เพื่อทำการเพิ่มข้อมูลใส่เข้าไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter()
napakson.update(&#39;กนกพล&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 2, &#39;น&#39;: 1, &#39;พ&#39;: 1, &#39;ล&#39;: 1})
napakson.update(&#39;คนตลก&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 3, &#39;น&#39;: 2, &#39;ล&#39;: 2, &#39;พ&#39;: 1, &#39;ค&#39;: 1, &#39;ต&#39;: 1})
napakson.update(&#39;ตกคลอง&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 4, &#39;ล&#39;: 3, &#39;น&#39;: 2, &#39;ค&#39;: 2, &#39;ต&#39;: 2, &#39;พ&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังสามารถสร้างโดยแทนเลขจำนวนข้อมูลเข้าไป เช่นเดียวกับเวลาสร้างดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(a=7,b=2)
print(nap) # ได้ Counter({&#39;a&#39;: 7, &#39;b&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือจะสร้างโดยแปลงจากดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dic = {11: 2, 13: 4}
nap = Counter(dic)
print(nap) # ได้ Counter({13: 4, 11: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างด้วยวิธีนี้ ค่าอาจจะไม่ใช่ตัวเลขก็ได้ ไม่ทำให้เกิดข้อผิดพลาดอะไร แต่ถ้าตัวที่ไม่ใช่ตัวเลขถูกใส่ข้อมูลเพิ่มเช่นใช้เมธอด .update() ในสภาพแบบนั้นก็จะเกิดข้อผิดพลาด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter({&amp;quot;ก&amp;quot;: &amp;quot;ข&amp;quot;, &amp;quot;ค&amp;quot;: &amp;quot;ง&amp;quot;})
print(nap) # ได้ Counter({&#39;ค&#39;: &#39;ง&#39;, &#39;ก&#39;: &#39;ข&#39;})
nap.update(&amp;quot;ก&amp;quot;) # ได้ TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .most_common() จะได้ลิสต์ของแต่ละคู่โดยเรียงจากมากไปน้อยตามจำนวนลำดับที่กำหนด แต่ถ้าไม่ได้ใส่เลขลำดับจะแสดงทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;สมพรสวดวนจนอรชรสองคนฉงนฉงวยงวยงงคอตกยอมนอนลงบนบก&#39;)
print(nap.most_common(3)) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5)]
print(nap.most_common()) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5), (&#39;ว&#39;, 4), (&#39;ส&#39;, 3), (&#39;ร&#39;, 3), (&#39;ย&#39;, 3), (&#39;ม&#39;, 2), (&#39;ค&#39;, 2), (&#39;ฉ&#39;, 2), (&#39;ก&#39;, 2), (&#39;บ&#39;, 2), (&#39;พ&#39;, 1), (&#39;ด&#39;, 1), (&#39;จ&#39;, 1), (&#39;ช&#39;, 1), (&#39;ต&#39;, 1), (&#39;ล&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .elements() จะได้อิเทอเรเตอร์ที่ไล่สมาชิกที่มีในนั้นทีละตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;ดวงกมลชงนมผงรอชมภมรบนดอน&#39;)
print(nap) # ได้ Counter({&#39;ม&#39;: 4, &#39;ง&#39;: 3, &#39;น&#39;: 3, &#39;ด&#39;: 2, &#39;ช&#39;: 2, &#39;ร&#39;: 2, &#39;อ&#39;: 2, &#39;ว&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;ผ&#39;: 1, &#39;ภ&#39;: 1, &#39;บ&#39;: 1})
el = nap.elements()
print(el) # ได้ &amp;lt;itertools.chain object at 0x10bbfae50&amp;gt;
print(list(el)) # ได้ [&#39;ด&#39;, &#39;ด&#39;, &#39;ว&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ก&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ล&#39;, &#39;ช&#39;, &#39;ช&#39;, &#39;น&#39;, &#39;น&#39;, &#39;น&#39;, &#39;ผ&#39;, &#39;ร&#39;, &#39;ร&#39;, &#39;อ&#39;, &#39;อ&#39;, &#39;ภ&#39;, &#39;บ&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างโดยกำหนดจำนวนเข้าไปโดยตรงก็จะออกมาเรียงตามลำดับที่ใส่โดยตัวเดียวกันอยู่ติดกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(na=3,ka=4,ma=2)
print(list(nap.elements())) # ได้ [&#39;na&#39;, &#39;na&#39;, &#39;na&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ma&#39;, &#39;ma&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter สามารถนำมาบวกลบกันได้ โดยการบวกจะเป็นการเอาสมาชิกที่มีมารวมกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ปลวกจกหนอนลงคอ&#39;)
b = Counter(&#39;คงลอยคอลอยวน&#39;)
print(a) # ได้ Counter({&#39;ล&#39;: 2, &#39;ก&#39;: 2, &#39;น&#39;: 2, &#39;อ&#39;: 2, &#39;ป&#39;: 1, &#39;ว&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1, &#39;ง&#39;: 1, &#39;ค&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 3, &#39;ค&#39;: 2, &#39;ล&#39;: 2, &#39;ย&#39;: 2, &#39;ง&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1})
print(a+b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ล&#39;: 4, &#39;น&#39;: 3, &#39;ค&#39;: 3, &#39;ว&#39;: 2, &#39;ก&#39;: 2, &#39;ง&#39;: 2, &#39;ย&#39;: 2, &#39;ป&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการลบจะเอามาหักลบกัน เพียงแต่ถ้าติดลบหรือเป็น 0 จะหายไปเลย ไม่แสดง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;พลพรรคครบสองคน&#39;)
b = Counter(&#39;ลงคอรอครอบครอง&#39;)
print(a) # ได้ Counter({&#39;ร&#39;: 3, &#39;ค&#39;: 3, &#39;พ&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1, &#39;ส&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1, &#39;น&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 4, &#39;ค&#39;: 3, &#39;ร&#39;: 3, &#39;ง&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1})
print(a-b) # ได้ Counter({&#39;พ&#39;: 2, &#39;ส&#39;: 1, &#39;น&#39;: 1})
print(b-a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังมีคุณสมบัติแปลกๆเช่นถ้ามีจำนวนทั้งบวกและลบอยู่ในนี้ หากเจอเครื่องหมายบวกจะกำจัดตัวที่เป็นลบ หากเจอเครื่องหมายลบจะเหลือแต่ตัวที่เป็นลบ และค่าจะกลายเป็นบวก&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(ha=3,na=-2,ya=-4)
print(+nap) # ได้ Counter({&#39;ha&#39;: 3})
print(-nap) # ได้ Counter({&#39;ya&#39;: 4, &#39;na&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สามารถใช้ตัวดำเนินการ &amp;amp; และ | ซึ่งจะให้ผลคล้ายกับการอินเตอร์เซ็กและยูเนียนกันของเซ็ต&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;สองสมรยอมลงคลองลอยคอ&#39;)
b = Counter(&#39;รอชวนภมรดมดอมดอกขจร&#39;)
print(a) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ล&#39;: 3, &#39;ส&#39;: 2, &#39;ม&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ร&#39;: 1})
print(b) # ได้ Counter({&#39;ร&#39;: 3, &#39;อ&#39;: 3, &#39;ม&#39;: 3, &#39;ด&#39;: 3, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(a|b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ม&#39;: 3, &#39;ร&#39;: 3, &#39;ล&#39;: 3, &#39;ด&#39;: 3, &#39;ส&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(b&amp;amp;a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ม&#39;: 2, &#39;ร&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เมธอด .subtract() จะให้ผลคล้ายกับการเอามาลบกัน แต่จะเป็นการเปลี่ยนแปลง Counter ตัวทางซ้าย (ตัวที่ใช้เมธอด) แทนที่จะคืนค่า และจำนวนที่เป็น 0 และติดลบจะยังคงเหลืออยู่&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ฝนตกตลอด&#39;)
b = Counter(&#39;ตกตรงตรอก&#39;)
print(a) # ได้ Counter({&#39;ต&#39;: 2, &#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;อ&#39;: 1, &#39;ด&#39;: 1})
print(b) # ได้ Counter({&#39;ต&#39;: 3, &#39;ก&#39;: 2, &#39;ร&#39;: 2, &#39;ง&#39;: 1, &#39;อ&#39;: 1})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: 0, &#39;ต&#39;: -1, &#39;ก&#39;: -1, &#39;ง&#39;: -1, &#39;ร&#39;: -2})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: -1, &#39;ง&#39;: -2, &#39;ก&#39;: -3, &#39;ต&#39;: -4, &#39;ร&#39;: -4})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สุดท้ายขอยกตัวอย่างการนำมาประยุกต์ใช้งาน เช่นนับจำนวนเฉพาะที่เป็นองค์ประกอบในตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def yaek(n):
    nap = Counter()
    i = 2
    while(i*2&amp;lt;=n):
        if(n%i==0):
            nap[i] += 1
            n = n//i
        elif(i==2):
            i += 1
        else:
            i += 2
    if(n!=1):
        nap[n] += 1
    return nap

print(yaek(104)) # ได้ Counter({2: 3, 13: 1})
print(yaek(150)) # ได้ Counter({5: 2, 2: 1, 3: 1})
print(yaek(508)) # ได้ Counter({2: 2, 127: 1})
print(yaek(4500)) # ได้ Counter({5: 3, 2: 2, 3: 2})
print(yaek(16129)) # ได้ Counter({127: 2})
print(yaek(19600)) # ได้ Counter({2: 4, 5: 2, 7: 2})
print(yaek(51000)) # ได้ Counter({2: 3, 5: 3, 3: 1, 17: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/20200413&#34;&gt;https://phyblas.hinaboshi.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pale Blue Dot ภาพถ่ายที่บอกว่าดาราศาสตร์คือความอ่อนน้อมถ่อมตน</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/pale_blue_dot/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/pale_blue_dot/</guid>
      <description>&lt;p&gt;ในหนังสือเรื่อง Cosmos ของคุณ Carl Sagan ซึ่งผู้เขียนยกย่องให้เป็นหนึ่งในหนังสือที่ดีที่สุดตลอดกาล และเป็นคัมภีร์การใช้ชีวิตมาจนถึงทุกวันนี้ อวกาศและดาราศาสตร์ในมุมมองของ Carl Sagan ชายที่ทำให้มนุษย์รักเขาด้วยความรักที่เขามีต่อจักรวาลถ่ายทอดออกมาผ่านตัวอักษรในทั้งงานเขียน งานบรรยาย นวนิยาย และมุมมองที่ทำให้เรารู้จักกับตัวเองมากขึ้นผ่านการศึกษาธรรมชาติ&lt;/p&gt;

&lt;p&gt;หนึ่งในตอนที่เขาได้เขียนไว้ในหนังสือ Cosmos ที่ทำให้เราได้เปิดมุมมองไปพร้อมกันย้อนกลับไป ณ ช่วงที่ยาน Pioneer 10 เดินทางโฉบดาวพฤหัสฯ ในปี 1972 เป็นยานอวกาศลำแรกที่จะได้ถ่ายภาพในระยะใกล้ของดาวพฤหัสฯ ส่งกลับมา ภาพถ่ายนี้จะเป็นภาพถ่ายประวัติศาสตร์ แต่มุมมองที่ Sagan ถ่ายทอดมาในหนังสือของเขาได้แก่ช่วงเวลา 20-30 นาที ในขณะที่เขานั่งอยู่บนรถที่กำลังเดินทางไปยังสำนักงานใหญ่ของ JPL ในแคลิฟอร์เนีย เพื่อเป็นสักขีพยานเมื่อ Pioneer 10 ส่งภาพถ่ายนั้นกลับมา Sagan เล่าว่า เขานึกจินตนาการถึงดาวพฤหัสฯ ว่าจะมีลักษณะเป็นอย่างไรและนั่นจะเป็นการจินตนาการถึงดาวพฤหัสครั้งสุดท้าย เพราะต่อไปจากนี้ดินแดนที่ยังไม่เคยถูกสำรวจจะถูกสำรวจแล้ว เมื่อภาพถ่ายของดาวพฤหัสเดินทางมาถึง มันจะเปลี่ยนมุมมองที่เราเคยมีต่อดาวพฤหัสฯ ไปตลอดกาล&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://spaceth.co/wp-content/uploads/2019/10/997_668761main_ac73-9341-1024x795.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;วันแห่งความรัก 14 กุมภาพันธ์ 1990 ตอนนั้นยาน Voyager 1 กำลังจะเดินทางออกนอกระบบสุริยะ Sagan ได้คุยกับทีมงานของ JPL ให้หันกล้องกลับมาถ่ายที่โลกของเราก่อนที่ยานจะเดินทางไปไกลแสนไกลและทิ้งไว้แต่เพียงมุมมองต่อจักรวาล (เหมือนเขาในอีกไม่กี่ปีต่อมาในอีก 7 ปีข้างหน้า) ภาพที่ได้มานั้น ไม่ได้มีข้อมูลทางวิทยาศาสตร์ที่น่าตื่นเต้นใด ๆ เป็นเพียงภาพที่ถูกรบกวนด้วยแสงอาทิตย์ และจุดเล็ก ๆ คือโลกของเรา&lt;/p&gt;

&lt;p&gt;หากแต่ภาพนั้น กลับกลายเป็นตัวแทนของทุกความพยายามในการศึกษาดาราศาสตร์ของเรา Sagan บรรยายภาพนั้นไว้ด้วยงานเขียนทางดาราศาสตร์และปรัชญาที่ทรงพลังว่า&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;จุดเล็ก ๆ จุดนั้นคือที่นี่ คือบ้าน คือพวกเรา บนจุดนั้นคือทุกคนที่เราเคยรู้จัก มนุษย์ทุกคนที่เคยมีตัวตนอยู่ รวมไว้ซึ่งความสุขสันต์และความทุกข์ทน ศาสนา แนวคิด ระบบเศรษฐกิจ นับพันนับหมื่น ทุก ๆ นักล่าและหัวขโมย ทุก ๆ วีรบุรุษและคนขี้ขลาด เหล่านักสร้าง นักทำลาย อารยธรรมต่าง ๆ กษัตราและชาวนาที่ยากชน คู่รักหนุ่มสาว เด็กน้อยที่เต็มเปี่ยมด้วยความหวัง ทุกบิดรมารดา นักประดิษฐ์ นักสำรวจ ครูอาจารย์ นักการเมืองสกปรก เหล่าดารา และผู้นำ ทุก ๆ คนบาปและนักบุญ ทุกคนในประวัติศาสตร์ของเราอาศัยอยู่ที่นี่ บนฝุ่นผงที่ลอยเคว้งท่ามกลางแสงอาทิตย์&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://spaceth.co/wp-content/uploads/2019/10/image-20150323-26729-1ocuw8j-1024x1024.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;โลกของเรา เป็นดั่งเวทีเล็ก ๆ ท่ามกลางโรงละครจักรวาลอันกว้างใหญ่ จินตนาการถึงเลือดเนื้อที่หลั่งไหล เชือดเฉือนโดยเหล่านายพลและจักรพรรดิ ที่หวังความรุ่งโรจน์อันชั่วคราวบนเศษเสี้ยวแห่งฝุ่นผง จินตนาการถึงการเยี่ยมเยือนที่เหี้ยมโหดจากผู้อาศัยจากมุมนึงของจุดนี้กระทำต่ออีกมุมหนึ่ง พวกเขาเข้าใจผิดกันมามากแค่ไหน พวกเขากล้าดีอย่างไรที่จะเข่นฆ่าเพื่อนมนุษย์ด้วยกันเอง ความเกลียดชังอันแรงกล้าและการวางตัวเองสำคัญหลงคิดว่าเรามีอภิสิทธิ์ในจักรวาล ทั้งหมดถูกท้าทายด้วยจุดจาง ๆ จุดนี้&lt;/p&gt;

&lt;p&gt;โลกของเรา เป็นจุดเล็ก ๆ หลมซ่อนอยู่ในเอกภพที่มืดมิด ท่ามกลางความสับสนวุ่นวาย ความเคว้งคว้าง ไม่มีสิ่งรับประกันว่าจะมีใคร จากที่ไหน มาช่วยเราจากการกระทำของตัวเราเอง ทั้งหมดขึ้นอยู่กับเรา เคยมีคนพูดไว้ว่าดาราศาสตร์นั้นทำให้เรารู้จักอ่อนน้อมถ่อมตน แต่ผมขอเพิ่มว่ามันคือการเข้าถึงตัวตน คงไม่มีสิ่งใดที่จะแสดงความโง่เขลาของความคิดมนุษย์ไปได้มากกว่าภาพถ่ายโลกของเราจากระยะที่ไกลแสนไกลนี้ มันคือความรับผิดชอบของเรา ที่จะถ้อยทีถ้อยอาศัยต่อกัน เพื่อปกป้องและหวงแหน จุดเล็ก ๆ จุดนี้ บ้านหลังเดียวที่เรารู้จัก&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;การสำรวจอวกาศของเราในทุกวันนี้ ต่างจากในอดีตอย่างมาก ในอดีตเราทำได้เพียงแต่มองท้องฟ้าและตั้งคำถามถึงจักรวาล แต่ตอนนี้เรามีโอกาสได้ส่งยานออกไปและหันกลับมามองตัวเราเอง จากอดีตที่เรามองว่าตัวเองเป็นศูนย์กลางของจักรวาล กลายเป็น ณ ตอนนี้เราได้รู้ตำแหน่งที่แท้จริงของเราในจักรวาลอันกว้างใหญ่ จากเดิมที่เรามองท้องฟ้าเป็นฉากและมีดวงดาวเป็นตัวละคร แต่ตอนนี้เรากลับกลายเป็นตัวละครบทสมทบที่เล็กที่สุดบนเสกลความกว้างใหญ่ของโรงละครที่ชื่อเอกภพ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://spaceth.co/wp-content/uploads/2019/10/PIA21839-16-1024x576.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เมื่อวันที่ 31 ธันวาคม วันสุดท้ายของปี 2018 ที่ผ่านมา ยาน Voyager 1 และ 2 เจ้าของภาพถ่าย Pale Blue Dot นี่ได้เดินทางออกนอกระบบสุริยะตลอดกาล ซึ่งเป็นวันเดียวกับที่ยาน Parker Solar Probe สัมผัสกับผิวนอกของดวงอาทิตย์ ปิดฉากการสำรวจอวกาศในปี 2018&lt;/p&gt;

&lt;p&gt;เหมือนที่ Sagan บอก สุดท้ายแล้ว การสำรวจจักรวาลมันคือการมองย้อนกลับมาเข้าใจตัวตนของเรา วิทยาศาสตร์เป็นเครื่องมืออันแหลมคมที่ทำให้เราสามารถเข้าถึงความเข้าใจตรงนั้นได้และสุดท้ายมันจะสอนเราให้รู้จักอ่อนน้อมถ่อมตน ยอมรับว่าไม่มีสิ่งอื่นใดที่เหนือไปกว่าธรรมชาติ จักรวาล และความจริง ที่เราอาจรับรู้ได้เพียงแค่น้อยนิดเท่านั้น&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ที่มาบทความ &lt;a href=&#34;https://spaceth.co/pale-blue-dot/&#34;&gt;spaceth.co&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>ระเบียบการส่งออกข้าวฉบับล่าสุด</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/rice-export/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/rice-export/</guid>
      <description>&lt;p&gt;การกำหนดให้ข้าวเป็นสินค้าที่ต้องขออนุญาตในการส่งออก ในระยะแรกเป็นไปโดยอาศัยอำนาจตามพระราชบัญญัติ(พ.ร.บ.) ควบคุมการส่งออกไปนอกและการนำเข้ามาในราชอาณาจักร ซึ่งสินค้าบางอย่าง พ.ศ.2482 โดยตราเป็นพระราชกฤษฎีกาควบคุมการส่งออกไปนอกราชอาณาจักรซึ่งสินค้าบางอย่าง (ฉบับ 13)พ.ศ.2490 ซึ่งมีรายการสินค้าอยู่หลายข้อหลายรายการ มีข้าวชนิดต่างๆ และผลิตภัณฑ์เป็นสินค้าในรายการที่ต้องขออนุญาตในการส่งออกด้วย ต่อมากระทรวงพาณิชย์ออกประกาศเรื่องการส่งสินค้าออกไปนอกราชอาณาจักร(ฉบับที่ 7) พ.ศ.2509 อนุญาตให้ส่งสินค้าตามพระราชกฤษฎีกาดังกล่าวออกไปได้เป็นการทั่วไป เว้นแต่สินค้าตามรายการท้ายประกาศกระทรวงพาณิชย์ดังกล่าว ซึ่งมีรายการข้าวเปลือก ข้าวกล้อง ข้าวสาร ข้าวเหนียว ปลายข้าว รำข้าว และสิ่งใดฯที่แปรสภาพสภาพจากข้าวทุกชนิด&lt;/p&gt;

&lt;p&gt;ในปี 2522 มีการตรา พ.ร.บ.การส่งออกฯ พ.ศ. 2522 ออกใช้บังคับแทนฉบับเดิม โดยมีบทเฉพาะกาล ตามมาตรา 25 ให้บรรดา พระราชกฤษฎีกา กฎกระทรวง ประกาศ และระเบียบ ที่ออกตาม พ.ร.บ.ควบคุมการส่งออกไปนอกและการนำเข้ามาในราชอาณาจักร ซึ่งสินค้าบางอย่าง พ.ศ.2482 ยังมีผลใช้บังคับต่อไป จนกว่าจะมีกฎกระทรวง ประกาศ ระเบียบตามกฎหมายฉบับนี้ออกใช้บังคับ ดังนั้น ข้าวเปลือก ข้าวกล้อง ข้าวสาร ข้าวเหนียว ปลายข้าว รำข้าว และสิ่งใดฯที่แปรสภาพสภาพจากข้าวทุกชนิด จึงยังเป็นสินค้าที่ต้องขออนุญาตส่งออก แต่ตอมามีประกาศกระทรวงพาณิชย์ว่าด้วยการส่งสินค้าออกไปนอกราชอาณาจักร(ฉบับที่ 66) พ.ศ.ยกเลิกการกำหนดให้ผลิตภัณฑ์ที่ทำจากข้าวทุกชนิดและสิ่งใดฯที่แปรสภาพจากข้าวทุกชนิด เป็นสินค้าที่ต้องขออนุญาตในการส่งออก&lt;/p&gt;

&lt;p&gt;ต่อมาในปี 2555 กระทรวงพาณิชย์ได้ออกประกาศกระทรวงพาณิชย์ เรื่องการกำหนดให้ข้าวเป็นสินค้าที่ต้องขออนุญาตในการส่งออก พ.ศ. 2555 ออกตาม พ.ร.บ.การส่งออกฯ พ.ศ.2522 กำหนดให้ข้าวซึ่งหมายถึง ข้าวเจ้าหรือข้าวเหนียว ทั้งที่เป็นข้าวเปลือก ข้าวกล้อง ข้าวสาร ปลายข้าว ข้าวนึ่งและรำ แต่ไม่รวมถึงผลิตภัณฑ์ที่ทำจากข้าว เป็นสินค้าที่ต้องขออนุญาตในการส่งออกไปนอกราชอาณาจักร ดังนั้นการกำหนดให้ข้าวต่างฯ เป็นสินค้าที่ต้องขออนุญาตในการส่งออกตามประกาศ พระราชกฤษฎีกาฉบับเดิม จึงถูกยกเลิกไป&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ระเบียบกระทรวงพาณิชย์ว่าด้วยการส่งข้าวออกไปนอกราชอาณาจักร&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;อันเนื่องมาจากข้าวเป็นสินค้าที่ต้องขออนุญาตในการส่งออก กระทรวงพาณิชย์ จึงออกระเบียบการส่งออกข้าวไปนอกราชอาณาจักร เพื่อกำหนดรายละเอียด คุณสมบัติ ของผู้ขอรับใบอนุญาต ขั้นตอน และเงื่อนไขที่ต้องปฏิบัติไว้ ดังนี้ คือ&lt;/p&gt;

&lt;p&gt;ฉบับที่ 1 คือ ระเบียบกระทรวงพาณิชย์ว่าด้วยการส่งออกข้าวฯ (ฉบับที่1) พ.ศ.2534 ต่อมามีการออกระเบียบกระทรวงพาณิชย์ เพื่อปรับปรุงแก้ไขระเบียบ(ฉบับที่1) ให้เหมาะสมกับสถานการณ์การค้าการส่งออกข้าว อีก 16ฉบับ&lt;/p&gt;

&lt;p&gt;ล่าสุด กระทรวงพาณิชย์ได้ออกระเบียบกระทรวงพาณิชย์ว่าด้วยการส่งข้าวออกไปนอกราชอาณาจักร พ.ศ. 2562 แก้ไขปรับปรุงระเบียบเดิมให้เหมาะสม โดยยกเลิกระเบียบเดิมทุกฉบับ เหลือเพียงระเบียบใหม่ฉบับเดียว เพื่อความสะดวกในการค้นหาอ้างอิง&lt;/p&gt;

&lt;p&gt;ซึ่งมีสาระสำคัญ โดยสรุปคือ&lt;/p&gt;

&lt;p&gt;ในระเบียบนี้มีการแยกการส่งออกข้าว เป็นข้าวเอกชน และข้าวรัฐบาล&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“ข้าวเอกชน”&lt;/strong&gt; คือข้าวที่ผู้ส่งออกที่เป็นผู้ประกอบการค้าข้าว ทำสัญญาขายให้ผู้ซื้อ เพื่อส่งออก (ซึ่งผู้ซื้ออาจเป็นผู้นำเข้า ตัวแทนนายหน้า หรือหน่วยงาน ของรัฐบาลต่างประเทศ องค์การระหว่างประเทศก็ได้ )&lt;/p&gt;

&lt;p&gt;“ ข้าวรัฐบาล” โดยให้คำหมายไว้คือ ข้าวที่รัฐบาลไทยตกลงทำซื้อขายกับรัฐบาลต่างประเทศหรือองค์การระหว่างประเทศหรือหน่วยงานหรือภาคเอกชนในต่างประเทศที่ได้รับมอบหมายหรือมอบอำนาจจากรัฐบาลต่างประเทศและส่งออกในนามกลุ่มลูกค้าต่างประเทศและให้ หมายความรวมถึงข้าวที่รัฐบาลไทยได้บริจาคให้แก่รัฐบาลต่างประเทศหรือองค์การระหว่างประเทศเพื่อการกุศลหรือเพื่อการอื่นใดตามที่รัฐบาลกำหนด&lt;/p&gt;

&lt;p&gt;( ข้าวรัฐบาล ซึ่งก็คือข้าวที่ขายแบบจีทูจี เมื่อกำหนดความหมายไว้ชัดเจน เช่นนี้ ต่อไปผู้ทุจริต ไม่สามารถขายข้าวให้พวกพ้องหาประโยชน์โดยมิชอบ โดยอ้างว่าเป็นการขายแบบจีทูจี แบบมั่วฯได้อีกต่อไป)&lt;/p&gt;

&lt;p&gt;มีการกำหนดคุณสมบัติของผู้มีสิทธิเป็นผู้ส่งออกข้าวไว้สี่ประการประการหนึ่งคือต้องเป็นผู้ที่ได้ขึ้นทะเบียนเป็นผู้ส่งข้าวออกไปนอกราชอาณาจักรไว้กับกรมการค้าต่างประเทศ&lt;/p&gt;

&lt;p&gt;(การกำหนดให้ผู้มีสิทธิเป็นผู้ส่งออกข้าวต้องขึ้นทะเบียนเป็นผู้ส่งข้าวออก เคยมีผู้โต้แย้งในศาลว่า กรมการค้าต่างประเทศอาศัยอำนาจตามกฎหมายใดที่กำหนดให้ผู้มีสิทธิส่งข้าวออกต้องขึ้นทะเบียนเป็นผู้ส่งข้าวออกไว้กับกรมการค้าต่างประเทศ ในประเด็นนี้มีการชี้แจงว่า เนื่องจากผู้ประกอบการส่งออกข้าวจะต้องเป็นผู้ได้รับใบอนุญาตให้เป็นผู้ค้าข้าวตามกฎหมายการค้าข้าว หรือเอกสารอื่นตามที่กฎหมายกำหนด เมื่อนำหลักฐานดังกล่าวมาแสดงตอนขึ้นทะเบียนครั้งเดียวและได้รับการขึ้นทะเบียนไว้ เมื่อมาขอรับใบอนุญาตในการส่งออกแต่ละครั้ง ก็จะเป็นการสะดวก ไม่ต้องแสดงหลักฐานดังกล่าวอีกเมื่อมายื่นขอรับใบอนุญาตแต่ละครั้ง และสามารถแสดงเลขทะเบียนผู้ส่งออกที่กระสอบ ถุงหรือภาชนะอื่นใด ที่บรรจุข้าวแทนการแสดงชื่อเต็มของผู้ส่งออกก็ได้ เป็นการอำนวยความสะดวกให้ผู้ส่งออก)&lt;/p&gt;

&lt;p&gt;การขอรับใบอนุญาต  การส่งออกข้าวออกไปนอกราชอาณาจักร ให้ยื่นคำขอให้ส่งสินค้าออกไปนอกราชอาณาจักรแบบ อ1 มิใช่เพื่อการค้า หรือแบบอ2 เพื่อการค้าแล้วแต่กรณี&lt;/p&gt;

&lt;p&gt;ข้อที่ผู้ส่งออกข้าวต้องปฏิบัติ  ในการส่งออกข้าว ผู้ส่งออกต้องปฏิบัติดังนี้คือ ต้องส่งข้าวที่ได้มาตรฐานตามที่กระทรวงพาณิชย์กำหนด และต้องผ่านการตรวจสอบ คื หากเป็นสินค้ามาตรฐาน(คือข้าวหอมมะลิไทย)ต้องผ่านการตรวจสอบโดยสำนักงานมาตรฐานสินค้า หรือผู้ประกอบธุรกิจที่ได้รับอนุญาตให้ตรวจสอบมาตรฐานสินค้าสำหรับข้าวหอมมะลิไทย ถ้าไม่ใช่ข้าวที่เป็นสินค้ามาตรฐาน(ข้าวทุกชนิดที่ไม่ใช่ข้าวหอมมะลิไทย)ต้องผ่านการตรวจสอบโดยสภาหอการค้าแห่งประเทศไทย (สำนักงานคณะกรรมการตรวจข้าว)  ยกเว้นการส่งออกที่เป็นการค้าชายแดน โดยข้าวที่ส่งออกต้องเป็นข้าว ประเภทและชนิดข้าวตรงตามที่ขอรับ ใบอนุญาต&lt;/p&gt;

&lt;p&gt;ปริมาณข้าวที่จะอนุญาตให้ส่งออกเพื่อมิใช่การค้า มีปริมาณระหว่าง 100 กิโลกรัม ถึง200 กิโลกรัม แล้วแต่ประเภทหรือชนิดข้าว&lt;/p&gt;

&lt;p&gt;การขาดคุณสมบัติเป็นผู้ส่งออกข้าว ในกรณีที่ผู้ส่งออกแสดงเอกสารเท็จในการขออนุญาตส่งออก หรือฝ่าฝืนเงื่อนไขหรือข้อกำหนดตามระเบียบนี้ หรือส่งออกสินค้าที่มีการปลอมปน หรือคุณภาพต่ำกว่าที่กำหนด จะถือว่าเป็นผู้กระทำความเสียหายต่อการค้าระหว่างประเทศ ขาดคุณสมบัติเป็นผู้มีสิทธิส่งออกข้าว&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ที่มาบทความ : &lt;a href=&#34;https://www.bangkokbiznews.com/blog/detail/646778&#34;&gt;กรุงเทพธุรกิจ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Dictionary</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/dictionary/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/dictionary/</guid>
      <description>

&lt;p&gt;ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python&lt;/p&gt;

&lt;p&gt;Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป&lt;/p&gt;

&lt;h2 id=&#34;การประกาศ-dictionary-ในภาษา-python&#34;&gt;การประกาศ Dictionary ในภาษา Python&lt;/h2&gt;

&lt;p&gt;ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา &lt;code&gt;{}&lt;/code&gt; มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310}
scores[&#39;bobby&#39;] = 4401

numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}

print(scores)
print(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ &lt;code&gt;key: value&lt;/code&gt; และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ &lt;code&gt;scores[&#39;bobby&#39;]&lt;/code&gt; ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร &lt;code&gt;numbers&lt;/code&gt; เป็น Dictionary ที่มี Key เป็นตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
{1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์ของโปรแกรมในการแสดงผลข้อมูลภายในตัวแปร Dictionary ทั้งสองที่เราได้สร้างขึ้น&lt;/p&gt;

&lt;h2 id=&#34;การเข-าถ-งข-อม-ลภายใน-dictionary&#34;&gt;การเข้าถึงข้อมูลภายใน Dictionary&lt;/h2&gt;

&lt;p&gt;หลังจากที่เราได้ประกาศ Dictionary ไปแล้ว ต่อไปจะการเข้าถึงข้อมูลเพื่ออ่านและอัพเดทข้อมูลโดยผ่านทาง Key ของมัน มาดูตัวอย่างการเข้าถึงข้อมูลใน Dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}

# display data
print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
print(&#39;danny =&amp;gt;&#39;, scores[&#39;danny&#39;])
print(&#39;bobby =&amp;gt;&#39;, scores[&#39;bobby&#39;])

# update data
scores[&#39;james&#39;] = scores[&#39;james&#39;] + 1000
scores[&#39;thomas&#39;] = 100

print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เรามีตัวแปร &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของผู้เล่นโดยชื่อเป็น Key ของ Dictionary ในการเข้าถึงข้อมูลนั้นจะใช้ Key ของมัน ในส่วนแรกเป็นการเข้าถึงข้อมูลภายใน Dictionary เพื่อแสดงผลคะแนนของแต่ละ Key ออกมาทางหน้าจอ ต่อมาเป็นการอัพเดทข้อมูลใน Dictionary โดยเราได้เพิ่มค่าให้กับ Key &lt;code&gt;&#39;james&#39;&lt;/code&gt; ขึ้นไปอีก 1000 และกำหนดค่าให้กับ Key &lt;code&gt;&#39;thomas&#39;&lt;/code&gt; เป็น 100 และแสดงผลอีกครั้ง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;james =&amp;gt; 1828
thomas =&amp;gt; 3628
danny =&amp;gt; 9310
bobby =&amp;gt; 4401
james =&amp;gt; 2828
thomas =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการเข้าถึงข้อมูลภายใน Dictionary เพื่ออ่านค่าและอัพเดทข้อมูล&lt;/p&gt;

&lt;p&gt;ในการเข้าถึงข้อมูลภายใน Dictionary นั้น คุณต้องตรวจสอบให้แน่ใจว่า Key นั้นมีอยู่จริง ไม่เช่นนั้นโปรแกรมจะเกิดข้อผิดพลาดขึ้น ยกตัวอย่างเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
print(scores[&#39;smith&#39;]) # Error

# check if key smith exist
if &#39;smith&#39; in scores.keys():
    print(scores[&#39;smith&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่างข้างบน โปรแกรมจะเกิดความผิดพลาดขึ้นเพราะเราได้เข้าถึง Key &lt;code&gt;&#39;smith&#39;&lt;/code&gt; ซึ่งไม่มีอยู่ใน &lt;code&gt;scores&lt;/code&gt; อย่าไรก็ตาม เราสามารถตรวจว่า Key มีอยู่หรือไม่ได้โดยการใช้คำสั่ง &lt;code&gt;in&lt;/code&gt; เพื่อตรวจสอบจาก Key ในเมธอด &lt;code&gt;keys()&lt;/code&gt; ของ Dictionary&lt;/p&gt;

&lt;h2 id=&#34;การอ-านค-าใน-dictionary-ด-วยคำส-ง-for-loop&#34;&gt;การอ่านค่าใน Dictionary ด้วยคำสั่ง For loop&lt;/h2&gt;

&lt;p&gt;คำสั่ง For loop นั้นเป็นคำสั่งที่ยืดหยุ่นและสามารถใช้งานได้อย่างหลากหลาย ในการอ่านค่าใน Dictionary นั้นเราสามารถใช้ For loop เพื่อวนอ่านค่าทั้ง Key และ Values ใน Dictionary ได้ มาดูตัวอย่างของโปรแกรม&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

for k, v in countries.items():
    print(k, v)

# iterate through keys
print(&#39;Key:&#39;, end = &#39; &#39;)
for k in countries.keys():
    print(k, end = &#39; &#39;)

# iterate through values
print(&#39;\nValue:&#39;, end = &#39; &#39;)
for v in countries.values():
    print(v, end = &#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นการใช้งานคำสั่ง For loop วนอ่านค่าใน Dictionary ซึ่งมี 3 loop ด้วยกัน ในลูปแรกเป็นการอ่านค่าแบบ Key และ Value ในแต่ละรอบของการทำงานเราเอาข้อมูลใน Dictionary ด้วยเมธอด &lt;code&gt;items()&lt;/code&gt; ซึ่งจะส่งค่ากลับเป็น Key และ Value กับมาและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; และ &lt;code&gt;v&lt;/code&gt; ตามลำดับ&lt;/p&gt;

&lt;p&gt;ในลูปที่สอง เป็นการวนอ่าน Key ทั้งหมดภายใน Dictionary โดยเมธอด &lt;code&gt;keys()&lt;/code&gt; จะส่งค่ากลับเป็น List ของ Key ทั้งหมดและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; แต่ละรอบของลูป และในลูปสุดท้ายนั้นเป็นการอ่าน Value ทั้งหมด และเมธอด &lt;code&gt;values()&lt;/code&gt; เพื่อรับค่าของ Value ทั้งหมดมาและใส่ในตัวแปร &lt;code&gt;v&lt;/code&gt; ในแต่ละรอบของลูป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;de Germany
ua Ukraine
th Thailand
nl Netherlands
Key: de ua th nl 
Value: Germany Ukraine Thailand Netherlands
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้คำสั่ง For loop เพื่ออ่านข้อมูลใน Dictionary ในภาษา Python&lt;/p&gt;

&lt;h2 id=&#34;python-dictionary-methods&#34;&gt;Python Dictionary methods&lt;/h2&gt;

&lt;p&gt;เช่นเดียวกับข้อมูลประเภทอื่นๆ Dictionary มีเมธอดที่ให้คุณสามารถทำงานกับมันได้ง่ายขึ้น โดยส่วนมากแล้วมักจะเป็นเมธอดในการอัพเดทและรับค่าข้อมูลภายใน Dictionary ต่อไปมาดูตัวอย่างการใช้งานเมธอดของ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

print(countries.keys())
print(countries.values())

print(countries.get(&#39;de&#39;)) # equal to countries[&#39;de&#39;]
countries.setdefault(&#39;tr&#39;, &#39;Turkey&#39;)

print(countries.popitem())
print(countries.popitem())

print(countries.items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นโปรแกรมในการใช้งานเมธอดของ Dictionary ตัวแปรของเรา &lt;code&gt;countries&lt;/code&gt; มาจากตัวอย่างก่อนหน้าที่มี Key เป็นชื่อย่อของประเทศและ Value เป็นชื่อเต็มของประเทศ เมธอด &lt;code&gt;keys()&lt;/code&gt; ส่งค่ากลับเป็น List ของ Key ทั้งหมดภายใน Dictionary และเมธอด &lt;code&gt;values()&lt;/code&gt; นั้นจะส่งเป็น List ของ Value&lt;/p&gt;

&lt;p&gt;หลังจากนั้นเป็นการเข้าถึงข้อมูลด้วยเมธอด &lt;code&gt;get()&lt;/code&gt; โดยมี Key เป็นอาร์กิวเมนต์ซึ่งผลลัพธ์การทำงานของมันจะเหมือนกับการเข้าถึงข้อมูลโดยตรง เช่น &lt;code&gt;countries[&#39;de&#39;]&lt;/code&gt; และเมธอด &lt;code&gt;setdefault()&lt;/code&gt; ใช้รับค่าจากคีย์ที่กำหนด ถ้าไม่มีจะเป็นการเพิ่มค่าดังกล่าวเข้าไปใน Dictionary และต่อมาเมธอด &lt;code&gt;popitem()&lt;/code&gt; จะนำสมาชิกตัวสุดท้ายออกจาก Dictionary และส่งค่าดังกล่าวกลับมาเป็น Tuple ออบเจ็ค ส่วนเมธอด &lt;code&gt;items()&lt;/code&gt; นั้นจะค่ากลับมาเป็น List ของ Tuple ของออบเจ็คของ Key และ Value ทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_keys([&#39;de&#39;, &#39;ua&#39;, &#39;th&#39;, &#39;nl&#39;])
dict_values([&#39;Germany&#39;, &#39;Ukraine&#39;, &#39;Thailand&#39;, &#39;Netherlands&#39;])
Germany
(&#39;tr&#39;, &#39;Turkey&#39;)
(&#39;nl&#39;, &#39;Netherlands&#39;)
dict_items([(&#39;de&#39;, &#39;Germany&#39;), (&#39;ua&#39;, &#39;Ukraine&#39;), (&#39;th&#39;, &#39;Thailand&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้เมธอดใน Dictionary ในภาษา Python และจากในตัวอย่างนั้นเป็นเพียงส่วนหนึ่งของเมธอดที่มีเท่านั้น สำหรับเมธอดทั้งหมดใน Dictionary นั้นแสดงดังตารางข้างล่างนี้&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Methods&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;clear()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ลบข้อมูลทั้งหมดภายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;copy()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;คัดลอก Dictionary ทั้งหมดไปยังอันใหม่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;get(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่าข้อมูลใน Dictionary จาก Key ที่กำหนด ถ้าหากไม่มี Key อยู่และไม่ได้กำหนด default จะทำให้เกิดข้อผิดพลาด KeyError&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;items()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;keys()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Key ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pop(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าสุดท้ายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;popitem()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น Tuple ออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;setdefault(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าของ Key ที่กำหนด ถ้าหากไม่มี Key อยู่ใส่ข้อมูลเข้าไปใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;update([other])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;อัพเดท Dictionary กับคู่ของ Key และ Value จากออบเจ็คอื่น และเขียนทับ Key ที่มีอยู่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;values()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Value ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;python-dictionary-functions&#34;&gt;Python Dictionary functions&lt;/h2&gt;

&lt;p&gt;ฟังก์ชันที่เป็นพื้นฐานและสามารถใช้ได้กับโครงสร้างข้อมูลทุกประเภทคือฟังก์ชัน &lt;code&gt;len()&lt;/code&gt; เป็นฟังก์ชันที่ใช้สำหรับนับจำนวนสมาชิกของเจ็ค และ Dictionary ยังมีฟังก์ชัน &lt;code&gt;iter()&lt;/code&gt; ที่ทำงานเหมือนกับเมธอด &lt;code&gt;items()&lt;/code&gt; นี่เป็นตารางของฟังก์ชันที่สามารถใช้ได้กับ Dictionary&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;len(dict)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นจำนวนของออบเจ็คใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;iter(dict)|ส่งค่ากลับเป็นออบเจ็คของ Key และ Value|&lt;/p&gt;

&lt;p&gt;คุณสามารถใช้คำสั่ง &lt;code&gt;del&lt;/code&gt; เพื่อลบข้อมูลภายใน Dictionary ได้ เช่น คำสั่ง &lt;code&gt;del countries[&#39;de&#39;]&lt;/code&gt; เพื่อลบสมาชิกที่มี Key ที่กำหนดออกไป และคำสั่ง &lt;code&gt;del countries&lt;/code&gt; นั้นเป็นการลบทั้งตัวแปร&lt;/p&gt;

&lt;p&gt;ในบทนี้ คุณได้เรียนรู้เกี่ยวกับ Dictionary ในภาษา Python คุณได้ทราบวิธีการสร้างและใช้งาน Dictionary และสถานการณ์ที่เหมาะสมที่จะใช้ข้อมูลประเภทนี้ เราได้แสดงให้เห็นถึงการเข้าถึงข้อมูลภายใน Dictionary แบบพื้นฐานและด้วยการใช้คำสั่งวนซ้ำ For loop รวมถึงการใช้งานเมธอดและฟังก์ชันสำหรับจัดการ Dictionary&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;http://marcuscode.com/lang/python/dictionary&#34;&gt;http://marcuscode.com/lang/python/dictionary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://ecs-support.github.io/knowledge-center/customs/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/knowledge-center/customs/post/jupyter/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;

&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;

&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;

&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;

&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;

&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
