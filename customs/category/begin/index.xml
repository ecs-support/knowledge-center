<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Begin | ECS</title>
    <link>https://ecs-support.github.io/category/begin/</link>
      <atom:link href="https://ecs-support.github.io/category/begin/index.xml" rel="self" type="application/rss+xml" />
    <description>Begin</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>ECS@Support©2020</copyright><lastBuildDate>Tue, 05 Feb 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ecs-support.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Begin</title>
      <link>https://ecs-support.github.io/category/begin/</link>
    </image>
    
    <item>
      <title>Dictionary</title>
      <link>https://ecs-support.github.io/post/dictionary/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://ecs-support.github.io/post/dictionary/</guid>
      <description>

&lt;p&gt;ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python&lt;/p&gt;

&lt;p&gt;Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป&lt;/p&gt;

&lt;h2 id=&#34;การประกาศ-dictionary-ในภาษา-python&#34;&gt;การประกาศ Dictionary ในภาษา Python&lt;/h2&gt;

&lt;p&gt;ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา &lt;code&gt;{}&lt;/code&gt; มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310}
scores[&#39;bobby&#39;] = 4401

numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}

print(scores)
print(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ &lt;code&gt;key: value&lt;/code&gt; และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ &lt;code&gt;scores[&#39;bobby&#39;]&lt;/code&gt; ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร &lt;code&gt;numbers&lt;/code&gt; เป็น Dictionary ที่มี Key เป็นตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
{1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์ของโปรแกรมในการแสดงผลข้อมูลภายในตัวแปร Dictionary ทั้งสองที่เราได้สร้างขึ้น&lt;/p&gt;

&lt;h2 id=&#34;การเข-าถ-งข-อม-ลภายใน-dictionary&#34;&gt;การเข้าถึงข้อมูลภายใน Dictionary&lt;/h2&gt;

&lt;p&gt;หลังจากที่เราได้ประกาศ Dictionary ไปแล้ว ต่อไปจะการเข้าถึงข้อมูลเพื่ออ่านและอัพเดทข้อมูลโดยผ่านทาง Key ของมัน มาดูตัวอย่างการเข้าถึงข้อมูลใน Dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}

# display data
print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
print(&#39;danny =&amp;gt;&#39;, scores[&#39;danny&#39;])
print(&#39;bobby =&amp;gt;&#39;, scores[&#39;bobby&#39;])

# update data
scores[&#39;james&#39;] = scores[&#39;james&#39;] + 1000
scores[&#39;thomas&#39;] = 100

print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เรามีตัวแปร &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของผู้เล่นโดยชื่อเป็น Key ของ Dictionary ในการเข้าถึงข้อมูลนั้นจะใช้ Key ของมัน ในส่วนแรกเป็นการเข้าถึงข้อมูลภายใน Dictionary เพื่อแสดงผลคะแนนของแต่ละ Key ออกมาทางหน้าจอ ต่อมาเป็นการอัพเดทข้อมูลใน Dictionary โดยเราได้เพิ่มค่าให้กับ Key &lt;code&gt;&#39;james&#39;&lt;/code&gt; ขึ้นไปอีก 1000 และกำหนดค่าให้กับ Key &lt;code&gt;&#39;thomas&#39;&lt;/code&gt; เป็น 100 และแสดงผลอีกครั้ง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;james =&amp;gt; 1828
thomas =&amp;gt; 3628
danny =&amp;gt; 9310
bobby =&amp;gt; 4401
james =&amp;gt; 2828
thomas =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการเข้าถึงข้อมูลภายใน Dictionary เพื่ออ่านค่าและอัพเดทข้อมูล&lt;/p&gt;

&lt;p&gt;ในการเข้าถึงข้อมูลภายใน Dictionary นั้น คุณต้องตรวจสอบให้แน่ใจว่า Key นั้นมีอยู่จริง ไม่เช่นนั้นโปรแกรมจะเกิดข้อผิดพลาดขึ้น ยกตัวอย่างเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
print(scores[&#39;smith&#39;]) # Error

# check if key smith exist
if &#39;smith&#39; in scores.keys():
    print(scores[&#39;smith&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่างข้างบน โปรแกรมจะเกิดความผิดพลาดขึ้นเพราะเราได้เข้าถึง Key &lt;code&gt;&#39;smith&#39;&lt;/code&gt; ซึ่งไม่มีอยู่ใน &lt;code&gt;scores&lt;/code&gt; อย่าไรก็ตาม เราสามารถตรวจว่า Key มีอยู่หรือไม่ได้โดยการใช้คำสั่ง &lt;code&gt;in&lt;/code&gt; เพื่อตรวจสอบจาก Key ในเมธอด &lt;code&gt;keys()&lt;/code&gt; ของ Dictionary&lt;/p&gt;

&lt;h2 id=&#34;การอ-านค-าใน-dictionary-ด-วยคำส-ง-for-loop&#34;&gt;การอ่านค่าใน Dictionary ด้วยคำสั่ง For loop&lt;/h2&gt;

&lt;p&gt;คำสั่ง For loop นั้นเป็นคำสั่งที่ยืดหยุ่นและสามารถใช้งานได้อย่างหลากหลาย ในการอ่านค่าใน Dictionary นั้นเราสามารถใช้ For loop เพื่อวนอ่านค่าทั้ง Key และ Values ใน Dictionary ได้ มาดูตัวอย่างของโปรแกรม&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

for k, v in countries.items():
    print(k, v)

# iterate through keys
print(&#39;Key:&#39;, end = &#39; &#39;)
for k in countries.keys():
    print(k, end = &#39; &#39;)

# iterate through values
print(&#39;\nValue:&#39;, end = &#39; &#39;)
for v in countries.values():
    print(v, end = &#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นการใช้งานคำสั่ง For loop วนอ่านค่าใน Dictionary ซึ่งมี 3 loop ด้วยกัน ในลูปแรกเป็นการอ่านค่าแบบ Key และ Value ในแต่ละรอบของการทำงานเราเอาข้อมูลใน Dictionary ด้วยเมธอด &lt;code&gt;items()&lt;/code&gt; ซึ่งจะส่งค่ากลับเป็น Key และ Value กับมาและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; และ &lt;code&gt;v&lt;/code&gt; ตามลำดับ&lt;/p&gt;

&lt;p&gt;ในลูปที่สอง เป็นการวนอ่าน Key ทั้งหมดภายใน Dictionary โดยเมธอด &lt;code&gt;keys()&lt;/code&gt; จะส่งค่ากลับเป็น List ของ Key ทั้งหมดและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; แต่ละรอบของลูป และในลูปสุดท้ายนั้นเป็นการอ่าน Value ทั้งหมด และเมธอด &lt;code&gt;values()&lt;/code&gt; เพื่อรับค่าของ Value ทั้งหมดมาและใส่ในตัวแปร &lt;code&gt;v&lt;/code&gt; ในแต่ละรอบของลูป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;de Germany
ua Ukraine
th Thailand
nl Netherlands
Key: de ua th nl 
Value: Germany Ukraine Thailand Netherlands
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้คำสั่ง For loop เพื่ออ่านข้อมูลใน Dictionary ในภาษา Python&lt;/p&gt;

&lt;h2 id=&#34;python-dictionary-methods&#34;&gt;Python Dictionary methods&lt;/h2&gt;

&lt;p&gt;เช่นเดียวกับข้อมูลประเภทอื่นๆ Dictionary มีเมธอดที่ให้คุณสามารถทำงานกับมันได้ง่ายขึ้น โดยส่วนมากแล้วมักจะเป็นเมธอดในการอัพเดทและรับค่าข้อมูลภายใน Dictionary ต่อไปมาดูตัวอย่างการใช้งานเมธอดของ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

print(countries.keys())
print(countries.values())

print(countries.get(&#39;de&#39;)) # equal to countries[&#39;de&#39;]
countries.setdefault(&#39;tr&#39;, &#39;Turkey&#39;)

print(countries.popitem())
print(countries.popitem())

print(countries.items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นโปรแกรมในการใช้งานเมธอดของ Dictionary ตัวแปรของเรา &lt;code&gt;countries&lt;/code&gt; มาจากตัวอย่างก่อนหน้าที่มี Key เป็นชื่อย่อของประเทศและ Value เป็นชื่อเต็มของประเทศ เมธอด &lt;code&gt;keys()&lt;/code&gt; ส่งค่ากลับเป็น List ของ Key ทั้งหมดภายใน Dictionary และเมธอด &lt;code&gt;values()&lt;/code&gt; นั้นจะส่งเป็น List ของ Value&lt;/p&gt;

&lt;p&gt;หลังจากนั้นเป็นการเข้าถึงข้อมูลด้วยเมธอด &lt;code&gt;get()&lt;/code&gt; โดยมี Key เป็นอาร์กิวเมนต์ซึ่งผลลัพธ์การทำงานของมันจะเหมือนกับการเข้าถึงข้อมูลโดยตรง เช่น &lt;code&gt;countries[&#39;de&#39;]&lt;/code&gt; และเมธอด &lt;code&gt;setdefault()&lt;/code&gt; ใช้รับค่าจากคีย์ที่กำหนด ถ้าไม่มีจะเป็นการเพิ่มค่าดังกล่าวเข้าไปใน Dictionary และต่อมาเมธอด &lt;code&gt;popitem()&lt;/code&gt; จะนำสมาชิกตัวสุดท้ายออกจาก Dictionary และส่งค่าดังกล่าวกลับมาเป็น Tuple ออบเจ็ค ส่วนเมธอด &lt;code&gt;items()&lt;/code&gt; นั้นจะค่ากลับมาเป็น List ของ Tuple ของออบเจ็คของ Key และ Value ทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_keys([&#39;de&#39;, &#39;ua&#39;, &#39;th&#39;, &#39;nl&#39;])
dict_values([&#39;Germany&#39;, &#39;Ukraine&#39;, &#39;Thailand&#39;, &#39;Netherlands&#39;])
Germany
(&#39;tr&#39;, &#39;Turkey&#39;)
(&#39;nl&#39;, &#39;Netherlands&#39;)
dict_items([(&#39;de&#39;, &#39;Germany&#39;), (&#39;ua&#39;, &#39;Ukraine&#39;), (&#39;th&#39;, &#39;Thailand&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้เมธอดใน Dictionary ในภาษา Python และจากในตัวอย่างนั้นเป็นเพียงส่วนหนึ่งของเมธอดที่มีเท่านั้น สำหรับเมธอดทั้งหมดใน Dictionary นั้นแสดงดังตารางข้างล่างนี้&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Methods&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;clear()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ลบข้อมูลทั้งหมดภายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;copy()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;คัดลอก Dictionary ทั้งหมดไปยังอันใหม่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;get(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่าข้อมูลใน Dictionary จาก Key ที่กำหนด ถ้าหากไม่มี Key อยู่และไม่ได้กำหนด default จะทำให้เกิดข้อผิดพลาด KeyError&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;items()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;keys()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Key ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pop(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าสุดท้ายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;popitem()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น Tuple ออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;setdefault(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าของ Key ที่กำหนด ถ้าหากไม่มี Key อยู่ใส่ข้อมูลเข้าไปใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;update([other])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;อัพเดท Dictionary กับคู่ของ Key และ Value จากออบเจ็คอื่น และเขียนทับ Key ที่มีอยู่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;values()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Value ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;python-dictionary-functions&#34;&gt;Python Dictionary functions&lt;/h2&gt;

&lt;p&gt;ฟังก์ชันที่เป็นพื้นฐานและสามารถใช้ได้กับโครงสร้างข้อมูลทุกประเภทคือฟังก์ชัน &lt;code&gt;len()&lt;/code&gt; เป็นฟังก์ชันที่ใช้สำหรับนับจำนวนสมาชิกของเจ็ค และ Dictionary ยังมีฟังก์ชัน &lt;code&gt;iter()&lt;/code&gt; ที่ทำงานเหมือนกับเมธอด &lt;code&gt;items()&lt;/code&gt; นี่เป็นตารางของฟังก์ชันที่สามารถใช้ได้กับ Dictionary&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;len(dict)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นจำนวนของออบเจ็คใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;iter(dict)|ส่งค่ากลับเป็นออบเจ็คของ Key และ Value|&lt;/p&gt;

&lt;p&gt;คุณสามารถใช้คำสั่ง &lt;code&gt;del&lt;/code&gt; เพื่อลบข้อมูลภายใน Dictionary ได้ เช่น คำสั่ง &lt;code&gt;del countries[&#39;de&#39;]&lt;/code&gt; เพื่อลบสมาชิกที่มี Key ที่กำหนดออกไป และคำสั่ง &lt;code&gt;del countries&lt;/code&gt; นั้นเป็นการลบทั้งตัวแปร&lt;/p&gt;

&lt;p&gt;ในบทนี้ คุณได้เรียนรู้เกี่ยวกับ Dictionary ในภาษา Python คุณได้ทราบวิธีการสร้างและใช้งาน Dictionary และสถานการณ์ที่เหมาะสมที่จะใช้ข้อมูลประเภทนี้ เราได้แสดงให้เห็นถึงการเข้าถึงข้อมูลภายใน Dictionary แบบพื้นฐานและด้วยการใช้คำสั่งวนซ้ำ For loop รวมถึงการใช้งานเมธอดและฟังก์ชันสำหรับจัดการ Dictionary&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;http://marcuscode.com/lang/python/dictionary&#34;&gt;http://marcuscode.com/lang/python/dictionary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
